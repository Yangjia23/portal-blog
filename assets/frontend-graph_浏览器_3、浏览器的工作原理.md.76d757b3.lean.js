import{o as l,c as n,a as e,b as u}from"./app.5a70c45b.js";const r='{"title":"一、导航流程","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、导航流程","slug":"一、导航流程"},{"level":3,"title":"1.1、用户输入（浏览器进程）","slug":"_1-1、用户输入（浏览器进程）"},{"level":3,"title":"1.2、URL请求流程（网络进程）","slug":"_1-2、url请求流程（网络进程）"},{"level":3,"title":"1.3、准备渲染进程（浏览器进程）","slug":"_1-3、准备渲染进程（浏览器进程）"},{"level":3,"title":"1.4、提交文档（浏览器进程）","slug":"_1-4、提交文档（浏览器进程）"},{"level":2,"title":"二、渲染流程(渲染进程)","slug":"二、渲染流程-渲染进程"},{"level":3,"title":"2.1、构建DOM树","slug":"_2-1、构建dom树"},{"level":3,"title":"2.2、样式计算","slug":"_2-2、样式计算"},{"level":3,"title":"2.3、布局","slug":"_2-3、布局"},{"level":3,"title":"2.4、分层","slug":"_2-4、分层"},{"level":3,"title":"2.5、图层绘制","slug":"_2-5、图层绘制"},{"level":3,"title":"2.6、重排、重绘与合成","slug":"_2-6、重排、重绘与合成"}],"relativePath":"frontend-graph/浏览器/3、浏览器的工作原理.md","lastUpdated":1635298566371}',o={},a=[e("p",null,"从一道高频面试题来探究浏览器的工作原理",-1),e("div",{class:"tip custom-block"},[e("p",{class:"custom-block-title"},"TIP"),e("p",null,"问题：从在浏览器地址栏输入直到在屏幕上看到页面的整个过程中都发生了些什么？")],-1),e("p",null,[u("从地址栏输入到页面展示，大体上可分成两大流程："),e("strong",null,"导航流程"),u(" 和 "),e("strong",null,"渲染流程")],-1),e("h2",{id:"一、导航流程"},[e("a",{class:"header-anchor",href:"#一、导航流程","aria-hidden":"true"},"#"),u(" 一、导航流程")],-1),e("p",null,[e("img",{src:"/portal-blog/images/browser/working-principle-01.png",alt:"http-cache"})],-1),e("h3",{id:"_1-1、用户输入（浏览器进程）"},[e("a",{class:"header-anchor",href:"#_1-1、用户输入（浏览器进程）","aria-hidden":"true"},"#"),u(" 1.1、用户输入（浏览器进程）")],-1),e("p",null,[u("当用户在地址栏中输入一个查询关键字，地址栏会判断这个关键字是 "),e("strong",null,"请求URL"),u(" 还是 "),e("strong",null,"查询内容")],-1),e("ul",null,[e("li",null,[e("strong",null,"查询内容"),u("：默认搜索引擎 + 关键字组成新的 "),e("code",null,"URL")]),e("li",null,[e("strong",null,"请求URL"),u("：请求"),e("code",null,"URL"),u(" + 协议 组成完整的 "),e("code",null,"URL"),u("， "),e("code",null,"eg: baidu.com => https://www.baidu.com/")])],-1),e("p",null,[e("strong",null,"当前浏览器状态")],-1),e("ul",null,[e("li",null,[e("code",null,"Tab"),u(" 标签页左侧 "),e("code",null,"icon"),u(" 图标变成 "),e("code",null,"loading"),u(" 状态")]),e("li",null,"页面还是显示当前页面内容")],-1),e("p",null,[e("strong",null,[e("code",null,"beforeunload"),u(" 事件")])],-1),e("ul",null,[e("li",null,[u("当按下 "),e("code",null,"enter"),u(" 后，当前页面将会被替换成新的页面，在这之前，当前页面可执行 "),e("code",null,"beforeunload"),u(" 事件")]),e("li",null,[e("code",null,"beforeunload"),u(" 事件中执行数据清理、询问用户是否离开当前页（表单页面未提交）等，可用户可以通过 "),e("code",null,"beforeunload"),u(" 事件来取消导航")])],-1),e("h3",{id:"_1-2、url请求流程（网络进程）"},[e("a",{class:"header-anchor",href:"#_1-2、url请求流程（网络进程）","aria-hidden":"true"},"#"),u(" 1.2、"),e("code",null,"URL"),u("请求流程（网络进程）")],-1),e("p",null,[u("当完整URL请求准备好后，"),e("strong",null,"浏览器进程"),u("会通过 "),e("code",null,"IPC"),u(" 将 "),e("code",null,"URL"),u("请求发给"),e("strong",null,"网络进程"),u("，网络进程收到"),e("code",null,"URL"),u("请求后，才发起真正的 "),e("code",null,"URL"),u("请求")],-1),e("h4",{id:"_1-2-1、判断是否“命中”-强缓存？"},[e("a",{class:"header-anchor",href:"#_1-2-1、判断是否“命中”-强缓存？","aria-hidden":"true"},"#"),u(" 1.2.1、判断是否“命中” 强缓存？")],-1),e("ul",null,[e("li",null,[u("若命中，返回缓存资源给浏览器进程，"),e("code",null,"HTTP"),u(" 状态码 "),e("code",null,"200"),u("；")]),e("li",null,"反之，进入网络请求流程")],-1),e("h4",{id:"_1-2-2、网络请求流程"},[e("a",{class:"header-anchor",href:"#_1-2-2、网络请求流程","aria-hidden":"true"},"#"),u(" 1.2.2、网络请求流程")],-1),e("ul",null,[e("li",null,[e("strong",null,"DNS 域名解析")])],-1),e("p",null,[u("获取请求域名的服务器"),e("code",null,"IP"),u("地址。端口号未明确指定的，使用默认端口，"),e("code",null,"HTTP"),u(" 默认 80，"),e("code",null,"HTTPS"),u(" 默认 443，")],-1),e("p",null,[u("如果请求协议是 "),e("code",null,"HTTPS"),u("，那么还需要建立 "),e("code",null,"TLS"),u(" 连接")],-1),e("ul",null,[e("li",null,[e("strong",null,"TCP 连接数量判断")])],-1),e("p",null,[e("code",null,"Chrome"),u("存在一机制，同一域名最多同时存在 6 个"),e("code",null,"TCP"),u("连接，后续的需要排队等候，未超过 6 个直接建立连接")],-1),e("ul",null,[e("li",null,[e("p",null,[e("strong",null,"构建请求行、请求头，发送请求信息")])]),e("li",null,[e("p",null,[e("strong",null,"服务端返回响应数据")])])],-1),e("h4",{id:"_1-2-3、处理响应数据"},[e("a",{class:"header-anchor",href:"#_1-2-3、处理响应数据","aria-hidden":"true"},"#"),u(" 1.2.3、处理响应数据")],-1),e("p",null,[e("strong",null,"是否重定向？")],-1),e("p",null,[u("当返回的状态码是 "),e("code",null,"301"),u(" 或 "),e("code",null,"302"),u("，表示重定向，"),e("strong",null,"网络进程"),u("会从响应头的 "),e("code",null,"Location"),u(" 字段里面读取重定向的地址, 重新发起 "),e("code",null,"HTTP/HTTPS"),u(" 请求。")],-1),e("p",null,[e("code",null,"301"),u("：永久重定向；"),e("code",null,"302"),u(" 暂时重定向")],-1),e("p",null,"非重定向，=> next",-1),e("p",null,[e("strong",null,"判断相应数据类型")],-1),e("p",null,[e("code",null,"Content-Type"),u(": 浏览器根据响应头中该字段判断服务器返回的响应体数据类型")],-1),e("ul",null,[e("li",null,[e("code",null,"application/octet-stream"),u("：字节流类型。浏览器会将数据传递给"),e("strong",null,"下载管理器"),u("做进一步的文件下载或预览等工作")]),e("li",null,[e("code",null,"text/html : html"),u(" 格式: => next")])],-1),e("h3",{id:"_1-3、准备渲染进程（浏览器进程）"},[e("a",{class:"header-anchor",href:"#_1-3、准备渲染进程（浏览器进程）","aria-hidden":"true"},"#"),u(" 1.3、准备渲染进程（浏览器进程）")],-1),e("p",null,"对于新页面，采用的渲染进程如下：",-1),e("ul",null,[e("li",null,"1、默认情况，打开新的页面都会使用单独的渲染进程"),e("li",null,[u("2、"),e("strong",null,"同一站点"),u("情况，在 A 页面打开 B 页面，A、B页面属于同一站点，那么 B 就复用 A 的渲染进程")])],-1),e("blockquote",null,[e("p",null,"❓思考：浏览器进程何时开始准备一个渲染进程？")],-1),e("ul",null,[e("li",null,[u("当浏览器进程将 请求"),e("code",null,"URL"),u(" 传递给网络进程时，就知道了要访问的站点，此时浏览器进程就可以开始查找或启动一个渲染进程，这个动作与让网络线程下载数据是同时的。")]),e("li",null,"当然，如果出现重定向的请求时，提前初始化的渲染进程可能就不会被使用了")],-1),e("h3",{id:"_1-4、提交文档（浏览器进程）"},[e("a",{class:"header-anchor",href:"#_1-4、提交文档（浏览器进程）","aria-hidden":"true"},"#"),u(" 1.4、提交文档（浏览器进程）")],-1),e("p",null,[u("含义："),e("strong",null,"浏览器进程"),u(" 将 "),e("strong",null,"网络进程"),u("接收到的 "),e("code",null,"HTML"),u(" 数据提交给"),e("strong",null,"渲染进程")],-1),e("p",null,"步骤：",-1),e("ul",null,[e("li",null,[e("p",null,[u("1、"),e("code",null,"浏览器进程"),u(" 接收到 "),e("code",null,"网络进程"),u("的响应头数据后，立即向 "),e("code",null,"渲染进程"),u(" 发起 "),e("strong",null,"“提交文档”"),u(" 的消息")])]),e("li",null,[e("p",null,[u("2、"),e("code",null,"渲染进程"),u("接收到"),e("strong",null,"提交文档"),u("消息后，与"),e("code",null,"网络进程"),u("之间建立传输数据的 "),e("strong",null,"管道")])]),e("li",null,[e("p",null,[u("3、等文档数据传输完成后，"),e("code",null,"渲染进程"),u("发送 "),e("strong",null,"确定提交"),u(" 的消息给"),e("code",null,"浏览器进程")])]),e("li",null,[e("p",null,[u("4、"),e("code",null,"浏览器进程"),u("收到 "),e("strong",null,"确定提交"),u(" 的消息后，会更新界面状态，包括安全状态、地址栏URL、前进后退的历史状态, 并更新Web 页面。")])])],-1),e("p",null,[u("(PS: 👇 此时Tab标签左侧的 icon图标还是"),e("code",null,"Loading"),u("状态)")],-1),e("p",null,[e("img",{src:"/portal-blog/images/browser/working-principle-02.png",alt:"working-principle"})],-1),e("h2",{id:"二、渲染流程-渲染进程"},[e("a",{class:"header-anchor",href:"#二、渲染流程-渲染进程","aria-hidden":"true"},"#"),u(" 二、渲染流程(渲染进程)")],-1),e("p",null,[e("strong",null,"渲染进程"),u("负责所有发生在浏览器页签中的事情。在一个渲染进程中，")],-1),e("ul",null,[e("li",null,[e("strong",null,"主线程"),u("负责解析，编译或运行代码等工作，当我们使用 "),e("code",null,"Worker"),u(" 时，"),e("code",null,"Worker"),u("线程会负责运行一部分代码")]),e("li",null,[e("strong",null,"合成线程"),u("和"),e("strong",null,"光栅线程"),u("是也是运行在渲染进程中的，负责更高效和顺畅的渲染页面")])],-1),e("h3",{id:"_2-1、构建dom树"},[e("a",{class:"header-anchor",href:"#_2-1、构建dom树","aria-hidden":"true"},"#"),u(" 2.1、构建DOM树")],-1),e("p",null,[e("code",null,"HTML"),u(" 文件经过 "),e("code",null,"HTML"),u(" 解析器解析，输出树状结构的 "),e("code",null,"DOM")],-1),e("h3",{id:"_2-2、样式计算"},[e("a",{class:"header-anchor",href:"#_2-2、样式计算","aria-hidden":"true"},"#"),u(" 2.2、样式计算")],-1),e("p",null,[u("计算中 "),e("code",null,"DOM"),u(" 节点中每个元素的具体样式 。分成以下三步")],-1),e("h4",{id:"_2-2-1、构建-stylesheets"},[e("a",{class:"header-anchor",href:"#_2-2-1、构建-stylesheets","aria-hidden":"true"},"#"),u(" 2.2.1、构建 styleSheets")],-1),e("p",null,[u("渲染引擎将 "),e("code",null,"CSS"),u(" 文本转换成浏览器可以理解的结构："),e("code",null,"styleSheets")],-1),e("h4",{id:"_2-2-2、属性值的标准化"},[e("a",{class:"header-anchor",href:"#_2-2-2、属性值的标准化","aria-hidden":"true"},"#"),u(" 2.2.2、属性值的标准化")],-1),e("p",null,[u("将类似 "),e("code",null,"red、bold、2em"),u(" 等值转换成渲染引擎容易理解的、标准化的计算值 "),e("code",null,"rgb(255, 0, 0)、700、32px"),u(" 等")],-1),e("h4",{id:"_2-2-3、计算每个节点的具体样式"},[e("a",{class:"header-anchor",href:"#_2-2-3、计算每个节点的具体样式","aria-hidden":"true"},"#"),u(" 2.2.3、计算每个节点的具体样式")],-1),e("ul",null,[e("li",null,[e("strong",null,"继承")])],-1),e("p",null,[e("code",null,"CSS"),u(" 继承是指每个DOM 节点都包含着父节点的样式。然而并不是所有的样式属性都可以继承")],-1),e("ul",null,[e("li",null,[e("strong",null,"层叠")])],-1),e("p",null,[e("code",null,"CSS"),u(" 层叠处于 "),e("code",null,"CSS"),u(" 核心地位，"),e("strong",null,"定义如何合并来自多个源的属性值的算"),u("法。最终计算输出的属性，可在控制台的 "),e("code",null,"ComputedStyle"),u(" 中查看到")],-1),e("h3",{id:"_2-3、布局"},[e("a",{class:"header-anchor",href:"#_2-3、布局","aria-hidden":"true"},"#"),u(" 2.3、布局")],-1),e("p",null,[u("计算出 "),e("code",null,"DOM"),u(" 树中可见元素的几何位置。分成以下俩步")],-1),e("h4",{id:"_2-3-1、创建布局树"},[e("a",{class:"header-anchor",href:"#_2-3-1、创建布局树","aria-hidden":"true"},"#"),u(" 2.3.1、创建布局树")],-1),e("p",null,[u("将 "),e("code",null,"DOM"),u(" 树中所有可见节点，添加到布局树中，而不可见的节点会被过滤掉，像 "),e("code",null,"head"),u(" 标签下内容，属性值 "),e("code",null,"display: none"),u(" 的节点等")],-1),e("p",null,[u("同时，当我们使用一个包含内容的伪元素（例如 "),e("code",null,"p::before {content: 'Hi!'}"),u(" ）时，元素会出现在布局树中而不存在于 "),e("code",null,"DOM"),u(" 树中，这也是为什么"),e("strong",null,"使用 DOM 提供的 API 无法获取伪元素"),u("的原因")],-1),e("h4",{id:"_2-3-2、布局计算"},[e("a",{class:"header-anchor",href:"#_2-3-2、布局计算","aria-hidden":"true"},"#"),u(" 2.3.2、布局计算")],-1),e("h3",{id:"_2-4、分层"},[e("a",{class:"header-anchor",href:"#_2-4、分层","aria-hidden":"true"},"#"),u(" 2.4、分层")],-1),e("p",null,[u("渲染引擎需要对特定的节点生成专门的图层，并生成一颗对于的图层树。浏览器的页面的页面实际上被分成多个图层，这些 "),e("strong",null,"图层叠加后合成了最终的页面"),u(" ，但不是每个节点都会生成一个图层，如果一个节点没有图层，那它就属于父节点的图层")],-1),e("p",null,[u("对开发者来说，当某一部分需要用独立的层渲染，我们可以使用 "),e("code",null,"css"),u(" 属性"),e("code",null,"will-change"),u("让浏览器创建层")],-1),e("blockquote",null,[e("p",null,"❓ ：节点需要满足什么条件？渲染引擎才会为节点创建新的图层？")],-1),e("ul",null,[e("li",null,"拥有层叠上下文属性的元素会被提升为单独一层，关于层叠上下文"),e("li",null,"需要裁剪（clip）的地方会被创建为图层"),e("li",null,[e("code",null,"<video>"),u(","),e("code",null,"<iframe>"),u(" 等元素也会创建单独图层")])],-1),e("h3",{id:"_2-5、图层绘制"},[e("a",{class:"header-anchor",href:"#_2-5、图层绘制","aria-hidden":"true"},"#"),u(" 2.5、图层绘制")],-1),e("h4",{id:"_2-5-1、生成待绘制列表（主线程）"},[e("a",{class:"header-anchor",href:"#_2-5-1、生成待绘制列表（主线程）","aria-hidden":"true"},"#"),u(" 2.5.1、生成待绘制列表（主线程）")],-1),e("p",null,[e("strong",null,"主线程"),u("会把每一个图层的绘制拆分成很小的绘制指令，然后把这些指令按照顺序组成一个"),e("strong",null,"待绘制列表")],-1),e("p",null,[e("img",{src:"/portal-blog/images/browser/paint-records.png",alt:"http-cache"})],-1),e("h4",{id:"_2-5-2、栅格化（合成线程）"},[e("a",{class:"header-anchor",href:"#_2-5-2、栅格化（合成线程）","aria-hidden":"true"},"#"),u(" 2.5.2、栅格化（合成线程）")],-1),e("p",null,[u("当图层的绘制列表准备好后，"),e("code",null,"主线程"),u("会把绘制列表提交给"),e("code",null,"合成线程"),u("。因为图层很大，而每次所看到的视口很小，没必要一次性绘制图层所有内容，")],-1),e("p",null,[u("所以"),e("code",null,"合成线程"),u("会将图层划分成 "),e("strong",null,"图块"),u("（"),e("code",null,"tile"),u("）,大小通常是 "),e("code",null,"256*256"),u("  或 "),e("code",null,"512*512"),u("。合成线程会按照视口附件的图块来优先生成位图, 实际生成位图的操作是由栅格化来执行的。")],-1),e("p",null,[u("所谓"),e("strong",null,"栅格化"),u("，是指将"),e("strong",null,"图块转化成位图")],-1),e("p",null,"图块是栅格化最小执行单位，渲染进程中存在一个栅格化线程池，负责所有图块的栅格化",-1),e("p",null,[e("strong",null,"GPU 加速")],-1),e("p",null,[u("栅格化过程通常使用 "),e("code",null,"GPU"),u(" 来加速生成，所有，此过程也叫做 "),e("strong",null,[e("code",null,"GPU"),u("栅格化")]),u("，生成的位图都保留在 "),e("code",null,"GPU"),u(" 内存中")],-1),e("p",null,[e("img",{src:"/portal-blog/images/browser/gpu.png",alt:"http-cache"})],-1),e("h4",{id:"_2-5-3、合成显示"},[e("a",{class:"header-anchor",href:"#_2-5-3、合成显示","aria-hidden":"true"},"#"),u(" 2.5.3、合成显示")],-1),e("p",null,[u("当所有图块被栅格化成位图，"),e("code",null,"合成线程"),u("会生成一个绘制图块的命令 "),e("code",null,"DrawQuad"),u(" 提交给"),e("code",null,"浏览器进程")],-1),e("p",null,[e("code",null,"浏览器进程"),u("中的 "),e("code",null,"viz"),u(" 组件接收到该命令后，将页面内容绘制到内存中，最终将内存显示在屏幕上")],-1),e("h3",{id:"_2-6、重排、重绘与合成"},[e("a",{class:"header-anchor",href:"#_2-6、重排、重绘与合成","aria-hidden":"true"},"#"),u(" 2.6、重排、重绘与合成")],-1),e("ul",null,[e("li",null,[e("strong",null,"重排")])],-1),e("p",null,"修改元素的宽、高、位置等。重排需要更新完整的渲染流水线，开销最大",-1),e("p",null,[e("img",{src:"/portal-blog/images/browser/relayout.png",alt:"http-cache"})],-1),e("ul",null,[e("li",null,[e("strong",null,"重绘")])],-1),e("p",null,"修改元素的背景色、字体颜色等。重绘省去了布局和分层阶段，效率比重排高",-1),e("p",null,[e("img",{src:"/portal-blog/images/browser/repaint.png",alt:"http-cache"})],-1),e("ul",null,[e("li",null,[e("strong",null,"合成")])],-1),e("p",null,"修改一个既不要布局也不要绘制的属性，渲染引擎将跳过布局和绘制，只执行最后面的合成操作。",-1),e("p",null,[u("使用 CSS 的 "),e("code",null,"transform"),u(" 实现动画，能避开重排和重绘，是直接在非主线程上执行动画，不占用主线程的资源")],-1),e("p",null,[e("img",{src:"/portal-blog/images/browser/compositing.png",alt:"http-cache"})],-1),e("p",null,[u("可使用 "),e("img",{src:"https://csstriggers.com/",alt:"csstriggers"}),u(" 工具查看 CSS 某个属性的修改是否会导致重排、重绘以及合成等")],-1)];o.render=function(e,u,r,o,d,c){return l(),n("div",null,a)};export{r as __pageData,o as default};
