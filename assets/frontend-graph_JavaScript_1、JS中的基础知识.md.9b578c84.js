import{o as n,c as s,d as a}from"./app.f28900b5.js";const t='{"title":"一、JS数据类型及其判断","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、JS数据类型及其判断","slug":"一、js数据类型及其判断"},{"level":3,"title":"1.1、数据类型种类","slug":"_1-1、数据类型种类"},{"level":3,"title":"1.2、数据类型判断","slug":"_1-2、数据类型判断"},{"level":3,"title":"1.3、实现 getType 方法","slug":"_1-3、实现-gettype-方法"},{"level":2,"title":"二、JS数据类型的转化","slug":"二、js数据类型的转化"},{"level":3,"title":"2.1、+ 运算符","slug":"_2-1、-运算符"}],"relativePath":"frontend-graph/JavaScript/1、JS中的基础知识.md","lastUpdated":1625321051076}',o={},e=a('<h2 id="一、js数据类型及其判断"><a class="header-anchor" href="#一、js数据类型及其判断" aria-hidden="true">#</a> 一、JS数据类型及其判断</h2><h3 id="_1-1、数据类型种类"><a class="header-anchor" href="#_1-1、数据类型种类" aria-hidden="true">#</a> 1.1、数据类型种类</h3><p>js 中一共内置了8种数据类型，可以分成 <strong>基本数据类型</strong> 和 <strong>引用数据类型</strong>，具体如下</p><ul><li><p><strong>基本数据类型 (7)</strong>：<code>number</code>, <code>string</code>, <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>symbol</code>, <code>bigInt</code></p></li><li><p><strong>引用数据类型 (1)</strong>： <code>object</code></p></li></ul><h3 id="_1-2、数据类型判断"><a class="header-anchor" href="#_1-2、数据类型判断" aria-hidden="true">#</a> 1.2、数据类型判断</h3><p>数据类型的判断方法，常见的有： <code>typeof</code>、<code>instanceof</code>、<code>Object.prototype.toString</code></p><h4 id="_1-2-1、typeof-运算符"><a class="header-anchor" href="#_1-2-1、typeof-运算符" aria-hidden="true">#</a> 1.2.1、typeof 运算符</h4><p><strong>用法</strong></p><div class="language-js"><pre><code><span class="token keyword">typeof</span> <span class="token number">1</span>      <span class="token comment">// &#39;number&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">null</span>   <span class="token comment">// &#39;object&#39;</span>\n<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// &#39;symbol&#39;</span>\n<span class="token keyword">typeof</span> console<span class="token punctuation">.</span>log <span class="token comment">// &#39;function&#39;</span>\n</code></pre></div><p><strong>总结</strong></p><ul><li><code>typeof</code> 运算符的返回值为 <strong>字符串</strong></li><li><code>typeof</code> 能判断出除 <code>null</code> 以为的基本数据类型，以及 <code>function</code> 类型</li><li><code>null</code> 会被判断为 <code>object</code>,</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>为什么 <code>typeof null === &#39;object&#39;</code>, 参考 <a href="https://juejin.cn/post/6844903613584654344" target="_blank" rel="noopener noreferrer">浅谈 instanceof 和 typeof 的实现原理</a></p></div><h4 id="_1-2-2、instanceof"><a class="header-anchor" href="#_1-2-2、instanceof" aria-hidden="true">#</a> 1.2.2、instanceof</h4><p><strong>用法</strong></p><p><code>a instanceof B</code>，<strong>对象<code>a</code>是否为<code>B</code>的实例</strong>，即 <code>a</code> 的原型链上是否存在 <code>B</code> 的构造函数</p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>  <span class="token comment">// true</span>\n<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span>\n<span class="token number">5</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span>  <span class="token comment">// false</span>\n<span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span>  <span class="token comment">// true</span>\n</code></pre></div><p><strong>实现</strong></p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">instanceofMock</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">R</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token constant">L</span> <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">L</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> <span class="token constant">L</span><span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n    <span class="token constant">L</span> <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span>__proto__\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">instanceofMock</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Array<span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">instanceofMock</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Number<span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="_1-2-4、终极办法-object-prototype-tostring"><a class="header-anchor" href="#_1-2-4、终极办法-object-prototype-tostring" aria-hidden="true">#</a> 1.2.4、终极办法 Object.prototype.toString</h4><p><strong>用法</strong></p><div class="language-js"><pre><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// [object Number]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// [object Undefined]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [object Array]</span>\n<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// [object Null]</span>\n<span class="token comment">// ...</span>\n</code></pre></div><h3 id="_1-3、实现-gettype-方法"><a class="header-anchor" href="#_1-3、实现-gettype-方法" aria-hidden="true">#</a> 1.3、实现 getType 方法</h3><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;null&#39;</span>\n  <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token keyword">typeof</span> x\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> t\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> cls <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> cls<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="二、js数据类型的转化"><a class="header-anchor" href="#二、js数据类型的转化" aria-hidden="true">#</a> 二、JS数据类型的转化</h2><p>js 是一种弱类型，或者说一种动态语言，不用提前声明变量的数据类型，在程序运行时自动被确定。</p><h3 id="_2-1、-运算符"><a class="header-anchor" href="#_2-1、-运算符" aria-hidden="true">#</a> 2.1、<code>+</code> 运算符</h3><p>对于<code>+</code> 运算符，当左右两侧数据类型不同时，转化规则不尽相同，具体规则如下</p><h4 id="_2-1-1、运算符两侧都是-number-类型"><a class="header-anchor" href="#_2-1-1、运算符两侧都是-number-类型" aria-hidden="true">#</a> 2.1.1、运算符两侧都是 <code>number</code> 类型</h4><ul><li>两边若存在 <code>NaN</code>, 则结果为 <code>NaN</code></li><li><code>Infinity + Infinity</code>, 结果为 <code>Infinity</code></li><li><code>Infinity + (-Infinity)</code>, 结果为 <code>-Infinity</code></li><li><code>-Infinity + (-Infinity)</code>, 结果为 <code>NaN</code></li></ul><h4 id="_2-1-1、运算符两侧有至少一个是-string-类型"><a class="header-anchor" href="#_2-1-1、运算符两侧有至少一个是-string-类型" aria-hidden="true">#</a> 2.1.1、运算符两侧有至少一个是 <code>string</code> 类型</h4><ul><li>两边都是字符串，执行字符串拼接</li><li>只有一边为字符串，则将另外的值转换成字符串，再进行拼接操作</li><li>两边有一个是对象，则调用 <code>valueOf</code> 或 <code>toString</code> 方法获取值，将其转换成基本数据类型再进行字符串拼接</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ES 规范规定，对象会根据对象内置的 <strong><code>ToPrimitive</code></strong> 函数，来决定对象转化成基本数据类型时，是倾向于调用 <code>valueOf</code> 还是 <code>toString</code></p></div>',32);o.render=function(a,t,o,p,c,l){return n(),s("div",null,[e])};export default o;export{t as __pageData};
