import{o as n,c as s,d as a}from"./app.5a70c45b.js";const t='{"title":"Vue3 + Vite 搭建 UI 组件库","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、组件库初始化","slug":"一、组件库初始化"},{"level":3,"title":"1.1、monorepo 项目初始化","slug":"_1-1、monorepo-项目初始化"},{"level":2,"title":"二、组件初始化","slug":"二、组件初始化"},{"level":3,"title":"2.1、lerna 初始化组件","slug":"_2-1、lerna-初始化组件"},{"level":3,"title":"2.2、引入 vue3、typescript","slug":"_2-2、引入-vue3、typescript"},{"level":3,"title":"2.3、设置组件出入口","slug":"_2-3、设置组件出入口"},{"level":3,"title":"2.4、整合所有组件","slug":"_2-4、整合所有组件"},{"level":2,"title":"三、搭建展示文档","slug":"三、搭建展示文档"},{"level":2,"title":"四、组件库打包","slug":"四、组件库打包"},{"level":3,"title":"4.1、打包整个组件库","slug":"_4-1、打包整个组件库"},{"level":3,"title":"4.2、打包每个单独组件","slug":"_4-2、打包每个单独组件"},{"level":2,"title":"五、组件库样式处理","slug":"五、组件库样式处理"},{"level":3,"title":"5.1、样式库初始化","slug":"_5-1、样式库初始化"},{"level":3,"title":"5.2、样式库打包处理","slug":"_5-2、样式库打包处理"},{"level":2,"title":"六、编写 Button 组件","slug":"六、编写-button-组件"}],"relativePath":"project-develop/Vue/Vue3 + Vite 搭建UI组件库.md","lastUpdated":1635300599217}',p={},o=[a('<h1 id="vue3-vite-搭建-ui-组件库"><a class="header-anchor" href="#vue3-vite-搭建-ui-组件库" aria-hidden="true">#</a> Vue3 + Vite 搭建 UI 组件库</h1><p>Vue3.0 和 Vite 发布都已经有很长的一段时间了，为了后续在工作中能更快的从 Vue 2.x 切换到 Vue 3, 有必要提前学习掌握，所以将使用 Vue3 + Vite 从 0 搭建一个简单的 UI 组件库。学习完你将了解以下内容</p><ul><li>组件库开发环境搭建工作</li><li>vite 如何打包整个组件库及单个组件</li><li>如何搭建一个组件库文档</li><li>vue3.0 如何开发一个强大的组件</li></ul><h2 id="一、组件库初始化"><a class="header-anchor" href="#一、组件库初始化" aria-hidden="true">#</a> 一、组件库初始化</h2><p>组件库采用 <code>monorepo</code> 策略，将使用 <code>Lerna</code> 来管理该项目。首先使用 lerna 进行项目初始化</p><p>(PS: 关于什么是 <code>monorepo</code> 策略，请参考: <a href="https://segmentfault.com/a/1190000039157365" target="_blank" rel="noopener noreferrer"> All in one：项目级 monorepo 策略最佳实践</a>)</p><h3 id="_1-1、monorepo-项目初始化"><a class="header-anchor" href="#_1-1、monorepo-项目初始化" aria-hidden="true">#</a> 1.1、monorepo 项目初始化</h3><div class="language-shell"><pre><code><span class="token function">yarn</span> global <span class="token function">add</span> lerna\n<span class="token function">mkdir</span> gt-ui\n<span class="token builtin class-name">cd</span> gt-ui\nlerna init\n</code></pre></div><p>初始化后，会在根目录生成 <code>lerna.json</code> 配置文件，同时为了组件可以相互引用，以及避免重复安装包，减少体积等，还添加其它配置</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;packages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;packages/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;npmClient&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yarn&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 使用yarn管理</span>\n  <span class="token property">&quot;useWorkspaces&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 使用workspace,需要配置 package.json</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在 <code>package.json</code> 文件中，也需要设置 <code>workspaces</code> 属性</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gt-ui&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;lerna&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.0.0&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;packages/*&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="二、组件初始化"><a class="header-anchor" href="#二、组件初始化" aria-hidden="true">#</a> 二、组件初始化</h2><h3 id="_2-1、lerna-初始化组件"><a class="header-anchor" href="#_2-1、lerna-初始化组件" aria-hidden="true">#</a> 2.1、lerna 初始化组件</h3><p>接着，会对单个组件进行初始化，每个组件相当于是一个子项目，子项目命名统一以 <code>@&lt;repo_name&gt;/</code> 开头，这是一种社区最佳实践。<code>Lerna</code> 提供了 <code>lerna create</code> 命令来初始化子项目</p><div class="language-shell"><pre><code>$: lerna create button\nlerna notice cli v4.0.0\nlerna WARN ENOREMOTE No <span class="token function">git</span> remote found, skipping repository property\npackage name: <span class="token punctuation">(</span>button<span class="token punctuation">)</span> @gt-ui/button\nversion: <span class="token punctuation">(</span><span class="token number">0.0</span>.0<span class="token punctuation">)</span>\ndescription:\nkeywords:\nhomepage:\nlicense: <span class="token punctuation">(</span>ISC<span class="token punctuation">)</span>\nentry point: <span class="token punctuation">(</span>lib/button.js<span class="token punctuation">)</span>\n<span class="token function">git</span> repository:\nAbout to <span class="token function">write</span> to /Users/yangjay/learn/playground/packages/button/package.json:\n\n<span class="token punctuation">{</span>\n  <span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;@gt-ui/button&quot;</span>,\n  <span class="token string">&quot;version&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;0.0.0&quot;</span>,\n  <span class="token string">&quot;description&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&gt; TODO: description&quot;</span>,\n  <span class="token string">&quot;author&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;yangjay &lt;yj960203only@gmail.com&gt;&quot;</span>,\n  <span class="token string">&quot;homepage&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,\n  <span class="token string">&quot;license&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ISC&quot;</span>,\n  <span class="token string">&quot;main&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;lib/button.js&quot;</span>,\n  <span class="token string">&quot;directories&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;lib&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;lib&quot;</span>,\n    <span class="token string">&quot;test&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;__tests__&quot;</span>\n  <span class="token punctuation">}</span>,\n  <span class="token string">&quot;files&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;lib&quot;</span>\n  <span class="token punctuation">]</span>,\n  <span class="token string">&quot;publishConfig&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;registry&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;https://registry.npm.taobao.org/&quot;</span>\n  <span class="token punctuation">}</span>,\n  <span class="token string">&quot;scripts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;test&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;echo <span class="token entity" title="\\&quot;">\\&quot;</span>Error: run tests from root<span class="token entity" title="\\&quot;">\\&quot;</span> &amp;&amp; exit 1&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\nIs this OK? <span class="token punctuation">(</span>yes<span class="token punctuation">)</span>\nlerna success create New package @gt-ui/button created at ./packages/button\n</code></pre></div><p>此时，整个项目目录结果如下</p><h3 id="_2-2、引入-vue3、typescript"><a class="header-anchor" href="#_2-2、引入-vue3、typescript" aria-hidden="true">#</a> 2.2、引入 vue3、typescript</h3><div class="language-shell"><pre><code><span class="token function">yarn</span> <span class="token function">add</span> vue@next typescript -W\nnpx tsc --init\n</code></pre></div><p>此时，会在根目录生成 <code>tsconfig.json</code> 配置文件, 我们进行如下如下设置</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 打包的目标语法</span>\n    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 模块转化后的格式</span>\n    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 支持模块转化</span>\n    <span class="token property">&quot;skipLibCheck&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 跳过类库检测</span>\n    <span class="token property">&quot;forceConsistentCasingInFileNames&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 强制区分大小写</span>\n    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 模块解析方式</span>\n    <span class="token property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;preserve&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 不转化jsx</span>\n    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 生成声明文件</span>\n    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 生成映射文件</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_2-3、设置组件出入口"><a class="header-anchor" href="#_2-3、设置组件出入口" aria-hidden="true">#</a> 2.3、设置组件出入口</h3><p>设置 <code>Button</code> 组件出入口，以及对应的 <code>install</code> 方法</p><p><code>packages/button/src/index.vue</code> 文件</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;MnButton&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p><code>packages/button/index.ts</code> 文件</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">&quot;./src/index.vue&quot;</span><span class="token punctuation">;</span>\n\nButton<span class="token punctuation">.</span>install <span class="token operator">=</span> <span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>Button<span class="token punctuation">.</span>name<span class="token punctuation">,</span> Button<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> Button<span class="token punctuation">;</span>\n</code></pre></div><p>此时，项目会报错，是因为默认无法解析<code>.vue</code>文件后缀的文件，需要增加<code>typings</code></p><p>根目录创建 <code>typings/vue-shim.d.ts</code> 文件</p><div class="language-js"><pre><code>declare module <span class="token string">&#39;*.vue&#39;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">import</span> <span class="token punctuation">{</span>App<span class="token punctuation">,</span>defineComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> component<span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> defineComponent<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n      <span class="token function">install</span><span class="token punctuation">(</span>app<span class="token operator">:</span>App<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> component\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_2-4、整合所有组件"><a class="header-anchor" href="#_2-4、整合所有组件" aria-hidden="true">#</a> 2.4、整合所有组件</h3><p>当初始化 Button 组件后，在项目根目录执行 <code>yarn install</code>, 此时，在 <code>node_modules </code> 目录下会包含了我们的子项目</p><div class="language-"><pre><code>.\n├── package.json\n└── node_modules/\n    ├── @gt-ui/button/\n    │   ├── index.js\n    │   └── package.json\n    ├── └── src/\n    │       └── index.vue\n\n</code></pre></div><p>因此，可以通过各自模块引入机制引入其它的子项目代码。</p><p>使用 <code>lerna create gt-ui</code> 创建一个子项目作为组件库的总入口，汇总所有组件。</p><p><code>package/gt-ui/index.ts</code> 文件</p><div class="language-js"><pre><code><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">&quot;@gt-ui/button&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">[</span>Button<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> install <span class="token operator">=</span> <span class="token punctuation">(</span>app<span class="token operator">:</span> App<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  components<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>component<span class="token punctuation">.</span>install<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>component<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>name<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  install<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>(ps: 后续 <code>index.ts</code>文件需通过脚本自动生成,避免手动引入 )</p><h2 id="三、搭建展示文档"><a class="header-anchor" href="#三、搭建展示文档" aria-hidden="true">#</a> 三、搭建展示文档</h2><p>用户对组件库的第一印象就是看组件文档是否好看，齐全等，可选择现成的 <code>VitePress</code> 进行搭建，也可自己动手从 0 搭建。</p><p>根目录运行 <code>yarn create @vitejs/app website --template vue</code> 命令初始化文档项目，项目目录结构如下</p><div class="language-"><pre><code>.\n├── package.json\n└── website/\n    ├── package.json\n    ├── index.html\n    ├── vite.config.js\n    ├── src/\n    │   ├── main.js\n    │   └── App.vue\n</code></pre></div><p><code>index.html</code> 作为文档项目入口，接下来会测试 <code>mono-ui</code> 组件库是否能正常渲染</p><p><code>website/src/main.js</code> 文件</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> GtUI <span class="token keyword">from</span> <span class="token string">&quot;gt-ui&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App.vue&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>GtUI<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><code>website/src/App.vue</code> 文件</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gt-button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gt-button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>根目录 <code>package.json</code> 文件中增加 <code>script</code> 脚本</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;docs:dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build --config ./website/vite.config.js&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>运行 <code>yarn docs:dev</code> 就看看到 <code>gt-button</code> 组件正常渲染了。</p><h2 id="四、组件库打包"><a class="header-anchor" href="#四、组件库打包" aria-hidden="true">#</a> 四、组件库打包</h2><p>我们将使用 vite 来打包组件库，需要先安装一些依赖</p><div class="language-shell"><pre><code><span class="token function">yarn</span> <span class="token function">add</span> @vitejs/plugin-vue rollup-plugin-typescript2 -D -W\n</code></pre></div><h3 id="_4-1、打包整个组件库"><a class="header-anchor" href="#_4-1、打包整个组件库" aria-hidden="true">#</a> 4.1、打包整个组件库</h3><p>新建 <code>build/vite.config.build.js</code> 文件</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&quot;@vitejs/plugin-vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> typescript <span class="token keyword">from</span> <span class="token string">&quot;rollup-plugin-typescript2&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token operator">...</span><span class="token function">typescript</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        tsconfigOverride<span class="token operator">:</span> <span class="token punctuation">{</span>\n          include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;packages/**/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;typings/vue-shim.d.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          exclude<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;packages/**/__tests__/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;website&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 默认会调用 tsconfig.json, 帮助我们生成声明文件</span>\n      apply<span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 仅作用与 build 阶段</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 请确保外部化那些你的库中不需要的依赖</span>\n      external<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      output<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 在 UMD 构建模式下为这些外部化的依赖提供一个全局变量</span>\n        globals<span class="token operator">:</span> <span class="token punctuation">{</span>\n          vue<span class="token operator">:</span> <span class="token string">&quot;Vue&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    lib<span class="token operator">:</span> <span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../packages/index.ts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;gt-ui&quot;</span><span class="token punctuation">,</span>\n      formats<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;es&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;umd&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>根目录 <code>package.json</code> 文件中增加 <code>script</code> 脚本</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build -c ./build/vite.config.build.js&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>运行命令 <code>yarn build</code> 默认会在 <code>dist</code> 目录下输出打包文件，根据配置，也就是 <code>gt-ui.es.js</code> 和 <code>gt-ui.umd.js</code> 两个文件，同时，还会调用 <code>tsconfig.json</code>, 帮助我们生成声明文件</p><div class="language-"><pre><code>dist\n├── button\n│   ├── index.d.ts\n│   └── src\n│       └── index.vue.d.ts\n├── gt-ui\n│   └── index.d.ts\n├── gt-ui.es.js\n└── gt-ui.umd.js\n</code></pre></div><p>可在 <code>website/src/main.js</code> 文件中，以相对路径的方式，导入组件库，测试组件能否正常使用</p><h3 id="_4-2、打包每个单独组件"><a class="header-anchor" href="#_4-2、打包每个单独组件" aria-hidden="true">#</a> 4.2、打包每个单独组件</h3><p>每个组件都是一个子项目，子项名称约定为 <code>@mono-ui/xxx</code>, 所以首先需要筛选中所以的组件，并且此打包任务存在多个 <code>entry</code></p><p>新建 <code>build/vite.config.build.disperse.js</code> 文件</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&quot;@vitejs/plugin-vue&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> typescript <span class="token keyword">from</span> <span class="token string">&quot;rollup-plugin-typescript2&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getPackagesSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@lerna/project&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 筛选出所有的组件</span>\n<span class="token keyword">const</span> inputs <span class="token operator">=</span> <span class="token function">getPackagesSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pkg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> pkg<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> name<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;@gt-ui&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      target<span class="token operator">:</span> <span class="token string">&quot;browser&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token operator">...</span><span class="token function">typescript</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        tsconfigOverride<span class="token operator">:</span> <span class="token punctuation">{</span>\n          compilerOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n            declaration<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 无需再次生成 ts声明文件</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          exclude<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 默认会调用 tsconfig.json, 帮助我们生成声明文件</span>\n      apply<span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    emptyOutDir<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      external<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      input<span class="token operator">:</span> inputs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> pkgName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;@gt-ui/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pkgName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/index.ts</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      output<span class="token operator">:</span> inputs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> pkgName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;@gt-ui/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n          dir<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pkgName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          entryFileNames<span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>\n          format<span class="token operator">:</span> <span class="token string">&quot;es&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    lib<span class="token operator">:</span> <span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;../packages/**/index.ts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>根目录 package.json 文件中增加 script 脚本</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build -c ./build/vite.config.build.js &amp;&amp; build:disperse&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build:disperse&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build -c ./build/vite.config.build.disperse.js&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>此时运行命令 <code>yarn build</code>, 会先打包组件库整体，再打包每个单独的组件，<code>dist</code> 目录结果如下</p><div class="language-"><pre><code>dist\n├── button\n│   ├── index.d.ts\n│   ├── index.js\n│   └── src\n│       └── button.vue.d.ts\n├── gt-ui\n│   └── index.d.ts\n├── gt-ui.es.js\n└── gt-ui.umd.js\n</code></pre></div><p>也可在 <code>website/src/main.js</code> 文件中，以相对路径的方式，导入单个组件，测试能否正常渲染</p><h2 id="五、组件库样式处理"><a class="header-anchor" href="#五、组件库样式处理" aria-hidden="true">#</a> 五、组件库样式处理</h2><h3 id="_5-1、样式库初始化"><a class="header-anchor" href="#_5-1、样式库初始化" aria-hidden="true">#</a> 5.1、样式库初始化</h3><p>在 <code>monorepo</code> 策略下，组件库样式也可作为子项目存在，组件的样式将与逻辑进行拆分， 通过 <code>lerna create theme</code> 创建样式项目, 将使用 <code>sass</code> 预处理器来编写样式。</p><p>整个项目目录结构如下</p><div class="language-"><pre><code>theme\n├── README.md\n├── package.json\n└── src\n    ├── commons\n    │   ├── config.scss\n    │   └── variables.scss\n    ├── fonts\n    │   ├── iconfont.css\n    │   ├── iconfont.ttf\n    │   ├── iconfont.woff\n    │   └── iconfont.woff2\n    ├── index.scss\n    ├── mixins\n    │   ├── bem-mixins.scss\n    │   └── index.scss\n    └── packages\n        ├── gt-button.scss\n        └── index.scss\n</code></pre></div><p>采用 <code>BEM</code> 命名规范来定义组件的类名，首先需要定义好一些分隔符</p><p><code>src/commons/config.scss</code> 文件</p><div class="language-scss"><pre><code><span class="token property"><span class="token variable">$namespace</span></span><span class="token punctuation">:</span> <span class="token string">&quot;gt&quot;</span><span class="token punctuation">;</span> <span class="token comment">// scss 变量，命名空间  gt-button</span>\n<span class="token property"><span class="token variable">$element-separator</span></span><span class="token punctuation">:</span> <span class="token string">&quot;__&quot;</span><span class="token punctuation">;</span> <span class="token comment">//元素分隔符 gt-button__label</span>\n<span class="token property"><span class="token variable">$modifier-separator</span></span><span class="token punctuation">:</span> <span class="token string">&quot;--&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 类型修饰 gt-button--mini</span>\n<span class="token property"><span class="token variable">$state-prefix</span></span><span class="token punctuation">:</span> <span class="token string">&quot;is-&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 状态 is-plain</span>\n</code></pre></div><p><code>src/mixins/bem-mixins.scss</code> 文件</p><div class="language-scss"><pre><code><span class="token keyword">@import</span> <span class="token string">&quot;../commons/config.scss&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// .gt-button{}</span>\n<span class="token keyword">@mixin</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token variable">$block</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token property"><span class="token variable">$B</span></span><span class="token punctuation">:</span> <span class="token variable">$namespace</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> <span class="token variable">$block</span><span class="token punctuation">;</span>\n  <span class="token selector">.<span class="token variable">#{$B}</span> </span><span class="token punctuation">{</span>\n    <span class="token keyword">@content</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// &amp;__label =&gt; .gt-button__label {}</span>\n<span class="token keyword">@mixin</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token variable">$element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token atrule"><span class="token rule">@at-root</span></span> <span class="token punctuation">{</span>\n    #<span class="token punctuation">{</span>&amp; <span class="token operator">+</span> <span class="token variable">$element-separator</span> <span class="token operator">+</span> <span class="token variable">$element</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>\n      <span class="token keyword">@content</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// &amp;--mini =&gt; .gt-button--mini {}</span>\n<span class="token keyword">@mixin</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token variable">$modifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token atrule"><span class="token rule">@at-root</span></span> <span class="token punctuation">{</span>\n    #<span class="token punctuation">{</span>&amp; <span class="token operator">+</span> <span class="token variable">$modifier-separator</span> <span class="token operator">+</span> <span class="token variable">$modifier</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>\n      <span class="token keyword">@content</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// .gt-button.is-xxx</span>\n<span class="token keyword">@mixin</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token atrule"><span class="token rule">@at-root</span></span> <span class="token punctuation">{</span>\n    <span class="token property"><span class="token variable">$S</span></span><span class="token punctuation">:</span> <span class="token variable">$state-prefix</span> <span class="token operator">+</span> <span class="token variable">$state</span><span class="token punctuation">;</span>\n    <span class="token selector"><span class="token parent important">&amp;</span>.<span class="token variable">#{$S}</span> </span><span class="token punctuation">{</span>\n      <span class="token keyword">@content</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>当定义好这些 mixin 函数后，编写组件的样式就可以少写很多重复代码</p><div class="language-scss"><pre><code><span class="token keyword">@import</span> <span class="token string">&#39;../mixins/index.scss&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">@include</span> <span class="token function">b</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> 12px 20px<span class="token punctuation">;</span>\n  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>\n  <span class="token keyword">@include</span> <span class="token function">m</span><span class="token punctuation">(</span>mini<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> 7px 15px<span class="token punctuation">;</span>\n    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">@include</span> <span class="token function">when</span><span class="token punctuation">(</span>disabled<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> #c0c4cc<span class="token punctuation">;</span>\n    <span class="token property">cursor</span><span class="token punctuation">:</span> not-allowed<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_5-2、样式库打包处理"><a class="header-anchor" href="#_5-2、样式库打包处理" aria-hidden="true">#</a> 5.2、样式库打包处理</h3><p>样式库打包只需要将样式文件拷贝到输出目录即可， <code>build/generate-theme.js</code></p><div class="language-js"><pre><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs-extra&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\ntasks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n  fs<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../packages/theme/src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../dist/theme&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// logger.success(`copy 成功`);</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>根目录 package.json 文件中增加 script 脚本</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build -c ./build/vite.config.build.js &amp;&amp; build:disperse &amp;&amp; generate:theme&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;build:disperse&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build -c ./build/vite.config.build.disperse.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;generate:theme&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node ./build/generate-theme.js&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>此时，运行 <code>yarn build</code> 就会一次性打包整个组件库、每个单独的组件以及样式库</p><h2 id="六、编写-button-组件"><a class="header-anchor" href="#六、编写-button-组件" aria-hidden="true">#</a> 六、编写 Button 组件</h2>',89)];p.render=function(a,t,p,e,c,u){return n(),s("div",null,o)};export{t as __pageData,p as default};
