import{o as n,c as a,d as s}from"./app.a1522aa7.js";const t='{"title":"一、什么是 plugin","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、什么是 plugin","slug":"一、什么是-plugin"},{"level":2,"title":"二、开发中常见的 plugin","slug":"二、开发中常见的-plugin"},{"level":2,"title":"三、如何手写 plugin","slug":"三、如何手写-plugin"}],"relativePath":"frontend-graph/工程化/4、webpack plugin机制.md","lastUpdated":1630371177523}',p={},o=[s('<h2 id="一、什么是-plugin"><a class="header-anchor" href="#一、什么是-plugin" aria-hidden="true">#</a> 一、什么是 plugin</h2><p><code>plugin</code> 直译 <code>插件</code>。用来扩展 <code>webpack</code> 的功能，让 <code>webpack</code> 更加灵活，在 <code>webpack</code> 生命周期中会<strong>广播</strong>出许多事件，<code>plugin</code> 可以监听这些事件，在合适的时机利用 <code>webpack</code> 提供的 <code>api</code> 修改打包结果</p><h2 id="二、开发中常见的-plugin"><a class="header-anchor" href="#二、开发中常见的-plugin" aria-hidden="true">#</a> 二、开发中常见的 plugin</h2><table><thead><tr><th>plugin</th><th>作用</th></tr></thead><tbody><tr><td><strong>ModuleScopePlugin</strong></td><td>限制所引入的文件范围</td></tr><tr><td><strong>MiniCssExtractPlugin</strong></td><td>将<code>CSS</code>抽离成单独的文件</td></tr><tr><td><strong>OptimizeCssAssetsPlugin</strong></td><td>对<code>CSS</code>代码进行压缩</td></tr><tr><td><strong>SpeedMeasurePlugin</strong></td><td>统计各个 <code>loader</code> 和插件所花费的时间</td></tr><tr><td><strong>TerserWebpackPlugin</strong></td><td><code>webpack</code> 默认使用 <code>terser</code> 来压缩 <code>JS</code>，可开启多进程</td></tr><tr><td><strong>CleanWebpackPlugin</strong></td><td>清除文件夹中内容</td></tr><tr><td><strong>webpack.DefinePlugin</strong></td><td>定义环境变量，保证在<code>JS</code>中可获取</td></tr><tr><td><strong>webpack.HotModuleReplacementPlugin</strong></td><td>模块热更新插件</td></tr><tr><td><strong>webpack-bundle-analyzer</strong></td><td>借助 <code>webpack-bundle-analyzer</code> 可查看打包后每个包的体积较大</td></tr></tbody></table><h2 id="三、如何手写-plugin"><a class="header-anchor" href="#三、如何手写-plugin" aria-hidden="true">#</a> 三、如何手写 plugin</h2><p><code>webpack plugin</code> 由以下部分组成</p><ul><li><p><code>plugin</code> 通常是一个 <code>JS</code> 命名的函数，在其原型上存在 <code>apply</code> 方法</p></li><li><p><code>apply</code> 方法接收 <code>complier</code> 对象作为参数，在方法中注册 <code>webpack</code> 自身的事件钩子, 并添加回调方法</p></li><li><p>在回调方法中，可处理 <code>webpack</code> 的打包数据，处理结束后通过 <code>webpack</code> 自身的回调返回</p></li></ul><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">DonePlugin</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 注册监听事件</span>\n    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token string">&quot;DonePlugin&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stats<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> DonePlugin<span class="token punctuation">;</span>\n</code></pre></div>',8)];p.render=function(s,t,p,e,c,l){return n(),a("div",null,o)};export{t as __pageData,p as default};
